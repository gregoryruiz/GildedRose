// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GildedRose.Tests.Step2
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UpdateQuality")]
    public partial class UpdateQualityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UpdateQuality.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UpdateQuality", "\tIn order to keep the system working the same\r\n\tAs a developer preparing its secu" +
                    "re belt\r\n\tI want to be reasonably ready to refactor", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\"Regular\" items\' \"SellIn\" & \"Quality\" lowers after an update.")]
        [NUnit.Framework.CategoryAttribute("Step2")]
        public virtual void RegularItemsSellInQualityLowersAfterAnUpdate_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\"Regular\" items\' \"SellIn\" & \"Quality\" lowers after an update.", new string[] {
                        "Step2"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn"});
            table1.AddRow(new string[] {
                        "Item #1",
                        "1"});
#line 8
 testRunner.Given("my system have those items", ((string)(null)), table1, "Given ");
#line 11
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("items\' SellIn is Reduced by 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Quality"});
            table2.AddRow(new string[] {
                        "Item #1",
                        "1"});
#line 14
 testRunner.Given("my system have those items", ((string)(null)), table2, "Given ");
#line 17
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("items\' Quality is Reduced by 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\"Regular\" items\' \"Quality\" lowers twice after an update, when \"SellIn\" is negativ" +
            "e.")]
        [NUnit.Framework.CategoryAttribute("Step2")]
        public virtual void RegularItemsQualityLowersTwiceAfterAnUpdateWhenSellInIsNegative_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\"Regular\" items\' \"Quality\" lowers twice after an update, when \"SellIn\" is negativ" +
                    "e.", new string[] {
                        "Step2"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn",
                        "Quality"});
            table3.AddRow(new string[] {
                        "Item #1",
                        "0",
                        "2"});
#line 22
 testRunner.Given("my system have those items", ((string)(null)), table3, "Given ");
#line 25
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.Then("items\' Quality is Reduced by 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\"Regular\" items\' \"Quality\" is never negative.")]
        [NUnit.Framework.CategoryAttribute("Step2")]
        public virtual void RegularItemsQualityIsNeverNegative_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\"Regular\" items\' \"Quality\" is never negative.", new string[] {
                        "Step2"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn",
                        "Quality"});
            table4.AddRow(new string[] {
                        "Item #1",
                        "1",
                        "0"});
#line 30
 testRunner.Given("my system have those items", ((string)(null)), table4, "Given ");
#line 33
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("items\' Quality is Reduced by 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn",
                        "Quality"});
            table5.AddRow(new string[] {
                        "Item #1",
                        "-1",
                        "0"});
#line 36
 testRunner.Given("my system have those items", ((string)(null)), table5, "Given ");
#line 39
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("items\' Quality is Reduced by 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\"AgedBrie\" items\' \"Quality\" increase after an update.")]
        [NUnit.Framework.CategoryAttribute("Step2")]
        public virtual void AgedBrieItemsQualityIncreaseAfterAnUpdate_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\"AgedBrie\" items\' \"Quality\" increase after an update.", new string[] {
                        "Step2"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn"});
            table6.AddRow(new string[] {
                        "Aged Brie",
                        "1"});
#line 44
 testRunner.Given("my system have those items", ((string)(null)), table6, "Given ");
#line 47
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then("items\' Quality is Increased by 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn"});
            table7.AddRow(new string[] {
                        "Aged Brie",
                        "0"});
#line 50
 testRunner.Given("my system have those items", ((string)(null)), table7, "Given ");
#line 53
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.Then("items\' Quality is Increased by 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn"});
            table8.AddRow(new string[] {
                        "Aged Brie",
                        "-1"});
#line 56
 testRunner.Given("my system have those items", ((string)(null)), table8, "Given ");
#line 59
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.Then("items\' Quality is Increased by 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\"Sulfuras\" items\' \"SellIn\" & \"Quality\" don\'t change after an update.")]
        [NUnit.Framework.CategoryAttribute("Step2")]
        public virtual void SulfurasItemsSellInQualityDonTChangeAfterAnUpdate_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\"Sulfuras\" items\' \"SellIn\" & \"Quality\" don\'t change after an update.", new string[] {
                        "Step2"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn",
                        "Quality"});
            table9.AddRow(new string[] {
                        "Sulfuras, Hand of Ragnaros",
                        "1",
                        "1"});
#line 64
 testRunner.Given("my system have those items", ((string)(null)), table9, "Given ");
#line 67
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
 testRunner.Then("items\' Quality is Reduced by 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
 testRunner.And("items\' SellIn is Reduced by 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn",
                        "Quality"});
            table10.AddRow(new string[] {
                        "Sulfuras, Hand of Ragnaros",
                        "0",
                        "0"});
#line 71
 testRunner.Given("my system have those items", ((string)(null)), table10, "Given ");
#line 74
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("items\' Quality is Reduced by 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
 testRunner.And("items\' SellIn is Reduced by 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn",
                        "Quality"});
            table11.AddRow(new string[] {
                        "Sulfuras, Hand of Ragnaros",
                        "-1",
                        "-1"});
#line 78
 testRunner.Given("my system have those items", ((string)(null)), table11, "Given ");
#line 81
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
 testRunner.Then("items\' Quality is Reduced by 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 83
 testRunner.And("items\' SellIn is Reduced by 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\"Sulfuras\" items\' \"Quality\" is 80 and it never alters")]
        [NUnit.Framework.CategoryAttribute("Step2")]
        public virtual void SulfurasItemsQualityIs80AndItNeverAlters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\"Sulfuras\" items\' \"Quality\" is 80 and it never alters", new string[] {
                        "Step2"});
#line 86
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn",
                        "Quality"});
            table12.AddRow(new string[] {
                        "Sulfuras, Hand of Ragnaros",
                        "1",
                        "80"});
#line 87
 testRunner.Given("my system have those items", ((string)(null)), table12, "Given ");
#line 90
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
 testRunner.Then("items\' Quality is Equal to 80", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn",
                        "Quality"});
            table13.AddRow(new string[] {
                        "Sulfuras, Hand of Ragnaros",
                        "0",
                        "80"});
#line 93
 testRunner.Given("my system have those items", ((string)(null)), table13, "Given ");
#line 96
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.Then("items\' Quality is Equal to 80", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn",
                        "Quality"});
            table14.AddRow(new string[] {
                        "Sulfuras, Hand of Ragnaros",
                        "-1",
                        "80"});
#line 99
 testRunner.Given("my system have those items", ((string)(null)), table14, "Given ");
#line 102
 testRunner.Then("items\' Quality is Equal to 80", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\"BackstagePass\" items\' \"Quality\" increase after an update.")]
        [NUnit.Framework.CategoryAttribute("Step2")]
        public virtual void BackstagePassItemsQualityIncreaseAfterAnUpdate_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\"BackstagePass\" items\' \"Quality\" increase after an update.", new string[] {
                        "Step2"});
#line 105
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn"});
            table15.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "11"});
#line 109
 testRunner.Given("my system have those items", ((string)(null)), table15, "Given ");
#line 112
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 113
 testRunner.Then("items\' Quality is Increased by 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn"});
            table16.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "10"});
#line 115
 testRunner.Given("my system have those items", ((string)(null)), table16, "Given ");
#line 118
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 119
 testRunner.Then("items\' Quality is Increased by 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn"});
            table17.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "6"});
#line 121
 testRunner.Given("my system have those items", ((string)(null)), table17, "Given ");
#line 124
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 125
 testRunner.Then("items\' Quality is Increased by 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn"});
            table18.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "5"});
#line 127
 testRunner.Given("my system have those items", ((string)(null)), table18, "Given ");
#line 130
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 131
 testRunner.Then("items\' Quality is Increased by 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn"});
            table19.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "1"});
#line 133
 testRunner.Given("my system have those items", ((string)(null)), table19, "Given ");
#line 136
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 137
 testRunner.Then("items\' Quality is Increased by 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn"});
            table20.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "0"});
#line 139
 testRunner.Given("my system have those items", ((string)(null)), table20, "Given ");
#line 142
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
 testRunner.Then("items\' Quality is Equal to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn"});
            table21.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "-1"});
#line 145
 testRunner.Given("my system have those items", ((string)(null)), table21, "Given ");
#line 148
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
 testRunner.Then("items\' Quality is Equal to 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Every items\' \"Quality\" is never more than 50")]
        [NUnit.Framework.CategoryAttribute("Step2")]
        public virtual void EveryItemsQualityIsNeverMoreThan50()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Every items\' \"Quality\" is never more than 50", new string[] {
                        "Step2"});
#line 152
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn",
                        "Quality"});
            table22.AddRow(new string[] {
                        "Item #1",
                        "1",
                        "50"});
            table22.AddRow(new string[] {
                        "Aged Brie",
                        "1",
                        "50"});
            table22.AddRow(new string[] {
                        "Sulfuras, Hand of Ragnaros",
                        "1",
                        "50"});
            table22.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "1",
                        "50"});
#line 153
 testRunner.Given("my system have those items", ((string)(null)), table22, "Given ");
#line 159
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 160
 testRunner.Then("items\' Quality is LowerOrEqual to 50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn",
                        "Quality"});
            table23.AddRow(new string[] {
                        "Item #1",
                        "0",
                        "50"});
            table23.AddRow(new string[] {
                        "Aged Brie",
                        "0",
                        "50"});
            table23.AddRow(new string[] {
                        "Sulfuras, Hand of Ragnaros",
                        "0",
                        "50"});
            table23.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "0",
                        "50"});
#line 162
 testRunner.Given("my system have those items", ((string)(null)), table23, "Given ");
#line 168
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 169
 testRunner.Then("items\' Quality is LowerOrEqual to 50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SellIn",
                        "Quality"});
            table24.AddRow(new string[] {
                        "Item #1",
                        "-1",
                        "50"});
            table24.AddRow(new string[] {
                        "Aged Brie",
                        "-1",
                        "50"});
            table24.AddRow(new string[] {
                        "Sulfuras, Hand of Ragnaros",
                        "-1",
                        "50"});
            table24.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "-1",
                        "50"});
#line 171
 testRunner.Given("my system have those items", ((string)(null)), table24, "Given ");
#line 177
 testRunner.When("I update quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 178
 testRunner.Then("items\' Quality is LowerOrEqual to 50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
