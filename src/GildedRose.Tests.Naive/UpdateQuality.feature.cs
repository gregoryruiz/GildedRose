// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GildedRose.Tests.Naive
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UpdateQuality")]
    public partial class UpdateQualityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UpdateQuality.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UpdateQuality", "\tIn order to keep the system working the same\r\n\tAs a developer preparing its secu" +
                    "re belt\r\n\tI want to be reasonably ready to refactor", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("At the end of each day our system lowers both values for every item")]
        [NUnit.Framework.CategoryAttribute("naive")]
        public virtual void AtTheEndOfEachDayOurSystemLowersBothValuesForEveryItem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("At the end of each day our system lowers both values for every item", new string[] {
                        "naive"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table1.AddRow(new string[] {
                        "Item #1",
                        "1",
                        "1"});
            table1.AddRow(new string[] {
                        "Item #2",
                        "1",
                        "1"});
#line 8
 testRunner.Given("my system have those items", ((string)(null)), table1, "Given ");
#line 12
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table2.AddRow(new string[] {
                        "Item #1",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "Item #2",
                        "0",
                        "0"});
#line 13
 testRunner.Then("my system should have those items", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Once the sell by date has passed, Quality degrades twice as fast")]
        [NUnit.Framework.CategoryAttribute("naive")]
        public virtual void OnceTheSellByDateHasPassedQualityDegradesTwiceAsFast()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Once the sell by date has passed, Quality degrades twice as fast", new string[] {
                        "naive"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table3.AddRow(new string[] {
                        "Item #1",
                        "1",
                        "10"});
#line 20
 testRunner.Given("my system have those items", ((string)(null)), table3, "Given ");
#line 23
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table4.AddRow(new string[] {
                        "Item #1",
                        "0",
                        "9"});
#line 24
 testRunner.Then("my system should have those items", ((string)(null)), table4, "Then ");
#line 27
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table5.AddRow(new string[] {
                        "Item #1",
                        "-1",
                        "7"});
#line 28
 testRunner.Then("my system should have those items", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Quality of an item is never negative")]
        [NUnit.Framework.CategoryAttribute("naive")]
        public virtual void TheQualityOfAnItemIsNeverNegative()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Quality of an item is never negative", new string[] {
                        "naive"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table6.AddRow(new string[] {
                        "Item #1",
                        "1",
                        "0"});
#line 34
 testRunner.Given("my system have those items", ((string)(null)), table6, "Given ");
#line 37
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table7.AddRow(new string[] {
                        "Item #1",
                        "0",
                        "0"});
#line 38
 testRunner.Then("my system should have those items", ((string)(null)), table7, "Then ");
#line 41
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table8.AddRow(new string[] {
                        "Item #1",
                        "-1",
                        "0"});
#line 42
 testRunner.Then("my system should have those items", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\"Aged Brie\" actually increases in Quality the older it gets")]
        [NUnit.Framework.CategoryAttribute("naive")]
        public virtual void AgedBrieActuallyIncreasesInQualityTheOlderItGets()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\"Aged Brie\" actually increases in Quality the older it gets", new string[] {
                        "naive"});
#line 47
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table9.AddRow(new string[] {
                        "Aged Brie",
                        "1",
                        "0"});
#line 48
 testRunner.Given("my system have those items", ((string)(null)), table9, "Given ");
#line 51
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table10.AddRow(new string[] {
                        "Aged Brie",
                        "0",
                        "1"});
#line 52
 testRunner.Then("my system should have those items", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Quality of an item is never more than 50")]
        [NUnit.Framework.CategoryAttribute("naive")]
        public virtual void TheQualityOfAnItemIsNeverMoreThan50()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Quality of an item is never more than 50", new string[] {
                        "naive"});
#line 57
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table11.AddRow(new string[] {
                        "Item #1",
                        "1",
                        "50"});
            table11.AddRow(new string[] {
                        "Aged Brie",
                        "1",
                        "50"});
#line 58
 testRunner.Given("my system have those items", ((string)(null)), table11, "Given ");
#line 62
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table12.AddRow(new string[] {
                        "Item #1",
                        "0",
                        "49"});
            table12.AddRow(new string[] {
                        "Aged Brie",
                        "0",
                        "50"});
#line 63
 testRunner.Then("my system should have those items", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\"Sulfuras\", being a legendary item, never has to be sold or decreases in Quality")]
        [NUnit.Framework.CategoryAttribute("naive")]
        public virtual void SulfurasBeingALegendaryItemNeverHasToBeSoldOrDecreasesInQuality()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\"Sulfuras\", being a legendary item, never has to be sold or decreases in Quality", new string[] {
                        "naive"});
#line 69
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table13.AddRow(new string[] {
                        "Item #1",
                        "1",
                        "50"});
            table13.AddRow(new string[] {
                        "Sulfuras, Hand of Ragnaros",
                        "1",
                        "50"});
#line 70
 testRunner.Given("my system have those items", ((string)(null)), table13, "Given ");
#line 74
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table14.AddRow(new string[] {
                        "Item #1",
                        "0",
                        "49"});
            table14.AddRow(new string[] {
                        "Sulfuras, Hand of Ragnaros",
                        "1",
                        "50"});
#line 75
 testRunner.Then("my system should have those items", ((string)(null)), table14, "Then ");
#line 79
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table15.AddRow(new string[] {
                        "Item #1",
                        "-1",
                        "47"});
            table15.AddRow(new string[] {
                        "Sulfuras, Hand of Ragnaros",
                        "1",
                        "50"});
#line 80
 testRunner.Then("my system should have those items", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\"Backstage passes\", like aged brie, increases in Quality as it\'s SellIn")]
        [NUnit.Framework.CategoryAttribute("naive")]
        public virtual void BackstagePassesLikeAgedBrieIncreasesInQualityAsItSSellIn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\"Backstage passes\", like aged brie, increases in Quality as it\'s SellIn", new string[] {
                        "naive"});
#line 86
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table16.AddRow(new string[] {
                        "Item #1",
                        "11",
                        "11"});
            table16.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "11",
                        "11"});
#line 90
 testRunner.Given("my system have those items", ((string)(null)), table16, "Given ");
#line 94
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table17.AddRow(new string[] {
                        "Item #1",
                        "10",
                        "10"});
            table17.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "10",
                        "12"});
#line 95
 testRunner.Then("my system should have those items", ((string)(null)), table17, "Then ");
#line 99
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table18.AddRow(new string[] {
                        "Item #1",
                        "9",
                        "9"});
            table18.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "9",
                        "14"});
#line 100
 testRunner.Then("my system should have those items", ((string)(null)), table18, "Then ");
#line 104
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 105
 testRunner.And("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.And("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table19.AddRow(new string[] {
                        "Item #1",
                        "6",
                        "6"});
            table19.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "6",
                        "20"});
#line 107
 testRunner.Then("my system should have those items", ((string)(null)), table19, "Then ");
#line 111
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table20.AddRow(new string[] {
                        "Item #1",
                        "5",
                        "5"});
            table20.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "5",
                        "22"});
#line 112
 testRunner.Then("my system should have those items", ((string)(null)), table20, "Then ");
#line 116
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table21.AddRow(new string[] {
                        "Item #1",
                        "4",
                        "4"});
            table21.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "4",
                        "25"});
#line 117
 testRunner.Then("my system should have those items", ((string)(null)), table21, "Then ");
#line 121
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 122
 testRunner.And("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.And("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table22.AddRow(new string[] {
                        "Item #1",
                        "1",
                        "1"});
            table22.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "1",
                        "34"});
#line 124
 testRunner.Then("my system should have those items", ((string)(null)), table22, "Then ");
#line 128
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table23.AddRow(new string[] {
                        "Item #1",
                        "0",
                        "0"});
            table23.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "0",
                        "37"});
#line 129
 testRunner.Then("my system should have those items", ((string)(null)), table23, "Then ");
#line 133
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table24.AddRow(new string[] {
                        "Item #1",
                        "-1",
                        "0"});
            table24.AddRow(new string[] {
                        "Backstage passes to a TAFKAL80ETC concert",
                        "-1",
                        "0"});
#line 134
 testRunner.Then("my system should have those items", ((string)(null)), table24, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An item can never have its Quality increase")]
        [NUnit.Framework.CategoryAttribute("naive")]
        public virtual void AnItemCanNeverHaveItsQualityIncrease()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An item can never have its Quality increase", new string[] {
                        "naive"});
#line 140
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table25.AddRow(new string[] {
                        "Sulfuras, Hand of Ragnaros",
                        "1",
                        "80"});
#line 143
 testRunner.Given("my system have those items", ((string)(null)), table25, "Given ");
#line 146
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table26.AddRow(new string[] {
                        "Sulfuras, Hand of Ragnaros",
                        "1",
                        "80"});
#line 147
 testRunner.Then("my system should have those items", ((string)(null)), table26, "Then ");
#line 150
 testRunner.When("the day ends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Sell In",
                        "Quality"});
            table27.AddRow(new string[] {
                        "Sulfuras, Hand of Ragnaros",
                        "1",
                        "80"});
#line 151
 testRunner.Then("my system should have those items", ((string)(null)), table27, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
